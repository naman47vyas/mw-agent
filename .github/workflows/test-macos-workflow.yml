name: Build macOS Installer

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release number for MW Agent for macOS'
        required: true
  push:
    paths-ignore:
      - '.github/**'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    strategy:
      matrix:
        include:
          - arch: arm64
            image: macos-latest
          - arch: amd64
            image: macos-12
      max-parallel: 1
    runs-on: ${{ matrix.image }}   
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Git credentials
      run: |
        # Remove any existing git config for github.com
        git config --global --unset-all url."https://github.com/".insteadOf || true
        # Set up new config with token
        git config --global url."https://${{ secrets.GHCR_TOKEN }}@github.com/".insteadOf "https://github.com/"
        # Set GOPRIVATE
        go env -w GOPRIVATE=github.com/middleware-labs,github.com/middleware-labs/innoParser
      env:
        GIT_TERMINAL_PROMPT: 0
        GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '^1.23.1'

    - name: Setting Release Number
      run: |
        if [ -n "${{ github.event.inputs.release_version }}" ]; then
          echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    - name: Build installer
      run: |
        CGO_ENABLED=1 GOPRIVATE=github.com/middleware-labs,github.com/middleware-labs/innoParser GOOS=darwin GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.agentVersion=${RELEASE_VERSION}" -v -a -o build/mw-host-agent cmd/host-agent/main.go
        bash package-tooling/darwin/create_installer.sh ${{ env.RELEASE_VERSION }}
      env:
        RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
        ARCH: ${{ matrix.arch }}

    - name: Debug build directory
      run: |
        echo "Contents of build directory:"
        ls -R build/
        echo "Contents of package-tooling/darwin directory:"
        ls -R package-tooling/darwin/

    - name: Upload installer package
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer-${{ matrix.arch }}
        path: |
          build/*.pkg
          package-tooling/darwin/*.pkg
        retention-days: 1

  upload-to-release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Set up GitHub CLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y

    - name: Upload to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ github.event.inputs.release_version }}"
        if [ -z "$VERSION" ]; then
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        # Debug info
        echo "VERSION: $VERSION"
        echo "Artifacts directory content:"
        ls -R ./artifacts
        
        # For each architecture
        for arch in arm64 amd64; do
          echo "Processing $arch architecture"
          # Try to find the pkg file for this architecture
          FOUND_FILE=$(find ./artifacts -type f -name "*.pkg" | grep "${arch}" | head -n 1)
          if [ ! -z "$FOUND_FILE" ]; then
            echo "Found file at $FOUND_FILE, uploading to release"
            gh release upload "$VERSION" "$FOUND_FILE" --clobber --repo ${{ github.repository }}
          else
            echo "Warning: No pkg file found for $arch architecture"
            echo "Available files:"
            find ./artifacts -type f
          fi
        done
